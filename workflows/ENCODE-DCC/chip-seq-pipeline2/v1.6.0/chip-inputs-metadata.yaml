parameter_meta: 
  chip.title:
    description: 'Experiment title.'
    group: pipeline_metadata
    example: 'ENCSR936XTK (subsampled 1/50)'

  chip.description:
    description: 'Experiment description.'
    group: 'pipeline_metadata'
    example: 'ZNF143 ChIP-seq on human GM12878 (subsampled 1/50)'
  
  chip.genome_tsv:
    description: 'Reference genome database TSV.'
    group: 'reference_genome'
    help: 'This TSV files includes all genome specific parameters (e.g. reference FASTA, bowtie2 index). You can still invidiaully define any parameters in it. Parameters defined in input JSON will override those defined in genome TSV.'
    example: 'https://storage.googleapis.com/encode-pipeline-genome-data/genome_tsv/v1/hg38_caper.tsv'
  
  chip.genome_name:
    description: 'Genome name.'
    group: 'reference_genome'
  
  chip.ref_fa:
    description: 'Reference FASTA file.'
    group: 'reference_genome'
  
  chip.bowtie2_idx_tar:
    description: 'BWA index TAR file.'
    group: 'reference_genome'
  
  chip.custom_aligner_idx_tar:
    description: 'Index TAR file for a custom aligner. To use a custom aligner, define "chip.custom_align_py" too.'
    group: 'reference_genome'
  
  chip.chrsz:
    description: '2-col chromosome sizes file.'
    group: 'reference_genome'
  
  chip.blacklist:
    description: 'Blacklist file in BED format.'
    group: 'reference_genome'
    help: 'Peaks will be filtered with this file.'
  
  chip.blacklist2:
    description: 'Secondary blacklist file in BED format.'
    group: 'reference_genome'
    help: 'If it is defined, it will be merged with chip.blacklist. Peaks will be filtered with merged blacklist.'
  
  chip.mito_chr_name:
    description: 'Mitochondrial chromosome name.'
    group: 'reference_genome'
    help: 'e.g. chrM, MT. Mitochondrial reads defined here will be filtered out during filtering BAMs in "filter" task.'
  
  chip.regex_bfilt_peak_chr_name:
    description: 'Reg-ex for chromosomes to keep while filtering peaks.'
    group: 'reference_genome'
    help: 'Chromosomes defined here will be kept. All other chromosomes will be filtered out in .bfilt. peak file. This is done along with blacklist filtering peak file.'
  
  chip.gensz:
    description: 'Genome sizes. "hs" for human, "mm" for mouse or sum of 2nd columnin chromosome sizes file.'
    group: 'reference_genome'
  
  chip.paired_end:
    description: 'Sequencing endedness.'
    group: 'input_genomic_data'
    help: 'Setting this on means that all replicates are paired ended. For mixed samples, use chip.paired_ends array instead.'
    example: true
  
  chip.paired_ends:
    description: 'Sequencing endedness array (for mixed SE/PE datasets).'
    group: 'input_genomic_data'
    help: 'Whether each biological replicate is paired ended or not.'
  
  chip.fastqs_rep1_R1:
    description: 'Read1 FASTQs to be merged for a biological replicate 1.'
    group: 'input_genomic_data'
    help: 'Define if you want to start pipeline from FASTQs files. Pipeline can start from any type of inputs (e.g. FASTQs, BAMs, ...). Choose one type and fill paramters for that type and leave other undefined. Especially for FASTQs, we have individual variable for each biological replicate to allow FASTQs of technical replicates can be merged. Make sure that they are consistent with read2 FASTQs (chip.fastqs_rep1_R2). These FASTQs are usually technical replicates to be merged.'
    example: [
        'https://storage.googleapis.com/encode-pipeline-test-samples/encode-chip-seq-pipeline/ENCSR936XTK/fastq_subsampled/rep1-R1.subsampled.50.fastq.gz'
    ]
  
  chip.fastqs_rep1_R2:
    description: 'Read2 FASTQs to be merged for a biological replicate 1.'
    group: 'input_genomic_data'
    help: 'Make sure that they are consistent with read1 FASTQs (chip.fastqs_rep1_R1). These FASTQs are usually technical replicates to be merged.'
    example: [
        'https://storage.googleapis.com/encode-pipeline-test-samples/encode-chip-seq-pipeline/ENCSR936XTK/fastq_subsampled/rep1-R2.subsampled.50.fastq.gz'
    ]
  
  chip.fastqs_rep2_R1:
    description: 'Read1 FASTQs to be merged for a biological replicate 2.'
    group: 'input_genomic_data'
    help: 'Make sure that they are consistent with read2 FASTQs (chip.fastqs_rep2_R2). These FASTQs are usually technical replicates to be merged.'
    example: [
        'https://storage.googleapis.com/encode-pipeline-test-samples/encode-chip-seq-pipeline/ENCSR936XTK/fastq_subsampled/rep2-R1.subsampled.50.fastq.gz'
    ]
  
  chip.fastqs_rep2_R2:
    description: 'Read2 FASTQs to be merged for a biological replicate 2.'
    group: 'input_genomic_data'
    help: 'Make sure that they are consistent with read1 FASTQs (chip.fastqs_rep2_R1). These FASTQs are usually technical replicates to be merged.'
    example: [
        'https://storage.googleapis.com/encode-pipeline-test-samples/encode-chip-seq-pipeline/ENCSR936XTK/fastq_subsampled/rep2-R2.subsampled.50.fastq.gz'
    ]
  
  chip.fastqs_rep3_R1:
    description: 'Read1 FASTQs to be merged for a biological replicate 3.'
    group: 'input_genomic_data'
    help: 'Make sure that they are consistent with read2 FASTQs (chip.fastqs_rep3_R2). These FASTQs are usually technical replicates to be merged.'
  
  chip.fastqs_rep3_R2:
    description: 'Read2 FASTQs to be merged for a biological replicate 3.'
    group: 'input_genomic_data'
    help: 'Make sure that they are consistent with read1 FASTQs (chip.fastqs_rep3_R1). These FASTQs are usually technical replicates to be merged.'
  
  chip.fastqs_rep4_R1:
    description: 'Read1 FASTQs to be merged for a biological replicate 4.'
    group: 'input_genomic_data'
    help: 'Make sure that they are consistent with read2 FASTQs (chip.fastqs_rep4_R2). These FASTQs are usually technical replicates to be merged.'
  
  chip.fastqs_rep4_R2:
    description: 'Read2 FASTQs to be merged for a biological replicate 4.'
    group: 'input_genomic_data'
    help: 'Make sure that they are consistent with read1 FASTQs (chip.fastqs_rep4_R1). These FASTQs are usually technical replicates to be merged.'
  
  chip.fastqs_rep5_R1:
    description: 'Read1 FASTQs to be merged for a biological replicate 5.'
    group: 'input_genomic_data'
    help: 'Make sure that they are consistent with read2 FASTQs (chip.fastqs_rep5_R2). These FASTQs are usually technical replicates to be merged.'
  
  chip.fastqs_rep5_R2:
    description: 'Read2 FASTQs to be merged for a biological replicate 5.'
    group: 'input_genomic_data'
    help: 'Make sure that they are consistent with read1 FASTQs (chip.fastqs_rep5_R1). These FASTQs are usually technical replicates to be merged.'
  
  chip.fastqs_rep6_R1:
    description: 'Read1 FASTQs to be merged for a biological replicate 6.'
    group: 'input_genomic_data'
    help: 'Make sure that they are consistent with read2 FASTQs (chip.fastqs_rep6_R2). These FASTQs are usually technical replicates to be merged.'
  
  chip.fastqs_rep6_R2:
    description: 'Read2 FASTQs to be merged for a biological replicate 6.'
    group: 'input_genomic_data'
    help: 'Make sure that they are consistent with read1 FASTQs (chip.fastqs_rep6_R1). These FASTQs are usually technical replicates to be merged.'
  
  chip.fastqs_rep7_R1:
    description: 'Read1 FASTQs to be merged for a biological replicate 7.'
    group: 'input_genomic_data'
    help: 'Make sure that they are consistent with read2 FASTQs (chip.fastqs_rep7_R2). These FASTQs are usually technical replicates to be merged.'
  
  chip.fastqs_rep7_R2:
    description: 'Read2 FASTQs to be merged for a biological replicate 7.'
    group: 'input_genomic_data'
    help: 'Make sure that they are consistent with read1 FASTQs (chip.fastqs_rep7_R1). These FASTQs are usually technical replicates to be merged.'
  
  chip.fastqs_rep8_R1:
    description: 'Read1 FASTQs to be merged for a biological replicate 8.'
    group: 'input_genomic_data'
    help: 'Make sure that they are consistent with read2 FASTQs (chip.fastqs_rep8_R2). These FASTQs are usually technical replicates to be merged.'
  
  chip.fastqs_rep8_R2:
    description: 'Read2 FASTQs to be merged for a biological replicate 8.'
    group: 'input_genomic_data'
    help: 'Make sure that they are consistent with read1 FASTQs (chip.fastqs_rep8_R1). These FASTQs are usually technical replicates to be merged.'
  
  chip.fastqs_rep9_R1:
    description: 'Read1 FASTQs to be merged for a biological replicate 9.'
    group: 'input_genomic_data'
    help: 'Make sure that they are consistent with read2 FASTQs (chip.fastqs_rep9_R2). These FASTQs are usually technical replicates to be merged.'
  
  chip.fastqs_rep9_R2:
    description: 'Read2 FASTQs to be merged for a biological replicate 9.'
    group: 'input_genomic_data'
    help: 'Make sure that they are consistent with read1 FASTQs (chip.fastqs_rep9_R1). These FASTQs are usually technical replicates to be merged.'
  
  chip.fastqs_rep10_R1:
    description: 'Read1 FASTQs to be merged for a biological replicate 10.'
    group: 'input_genomic_data'
    help: 'Make sure that they are consistent with read2 FASTQs (chip.fastqs_rep10_R2). These FASTQs are usually technical replicates to be merged.'
  
  chip.fastqs_rep10_R2:
    description: 'Read2 FASTQs to be merged for a biological replicate 10.'
    group: 'input_genomic_data'
    help: 'Make sure that they are consistent with read1 FASTQs (chip.fastqs_rep10_R1). These FASTQs are usually technical replicates to be merged.'
  
  chip.bams:
    description: 'List of unfiltered/raw BAM files for each biological replicate.'
    group: 'input_genomic_data'
    help: 'Define if you want to start pipeline from BAM files. Unfiltered/raw BAM file generated from aligner (e.g. bowtie2). Each entry for each biological replicate. e.g. [rep1.bam, rep2.bam, rep3.bam, ...].'
  
  chip.nodup_bams:
    description: 'List of filtered/deduped BAM files for each biological replicate'
    group: 'input_genomic_data'
    help: 'Define if you want to start pipeline from filtered BAM files. Filtered/deduped BAM file. Each entry for each biological replicate. e.g. [rep1.nodup.bam, rep2.nodup.bam, rep3.nodup.bam, ...].'
  
  chip.tas:
    description: 'List of TAG-ALIGN files for each biological replicate.'
    group: 'input_genomic_data'
    help: 'Define if you want to start pipeline from TAG-ALIGN files. TAG-ALIGN is in a 6-col BED format. It is a simplified version of BAM. Each entry for each biological replicate. e.g. [rep1.tagAlign.gz, rep2.tagAlign.gz, ...].'
  
  chip.peaks:
    description: 'List of NARROWPEAK files (not blacklist filtered) for each biological replicate.'
    group: 'input_genomic_data'
    help: 'Define if you want to start pipeline from PEAK files. Each entry for each biological replicate. e.g. [rep1.narrowPeak.gz, rep2.narrowPeak.gz, ...]. Define other PEAK parameters (e.g. chip.peaks_pr1, chip.peak_pooled) according to your flag settings (e.g. chip.true_rep_only) and number of replicates. If you have more than one replicate then define chip.peak_pooled, chip.peak_ppr1 and chip.peak_ppr2. If chip.true_rep_only flag is on then do not define any parameters (chip.peaks_pr1, chip.peaks_pr2, chip.peak_ppr1 and chip.peak_ppr2) related to pseudo replicates.'
  
  chip.peaks_pr1:
    description: 'List of NARROWPEAK files (not blacklist filtered) for pseudo-replicate 1 of each biological replicate.'
    group: 'input_genomic_data'
    help: 'Define if you want to start pipeline from PEAK files. Define if chip.true_rep_only flag is off.'
  
  chip.peaks_pr2:
    description: 'List of NARROWPEAK files (not blacklist filtered) for pseudo-replicate 2 of each biological replicate.'
    group: 'input_genomic_data'
    help: 'Define if you want to start pipeline from PEAK files. Define if chip.true_rep_only flag is off.'
  
  chip.peak_pooled:
    description: 'NARROWPEAK file for pooled true replicate.'
    group: 'input_genomic_data'
    help: 'Define if you want to start pipeline from PEAK files. Define if you have multiple biological replicates. Pooled true replicate means analysis on pooled biological replicates.'
  
  chip.peak_ppr1:
    description: 'NARROWPEAK file for pooled pseudo replicate 1.'
    group: 'input_genomic_data'
    help: 'Define if you want to start pipeline from PEAK files. Define if you have multiple biological replicates and chip.true_rep_only flag is off. PPR1 means analysis on pooled 1st pseudo replicates. Each biological replicate is shuf/split into two pseudos. This is a pooling of each replicate''s 1st pseudos.'
  
  chip.peak_ppr2:
    description: 'NARROWPEAK file for pooled pseudo replicate 2.'
    group: 'input_genomic_data'
    help: 'Define if you want to start pipeline from PEAK files. Define if you have multiple biological replicates and chip.true_rep_only flag is off. PPR1 means analysis on pooled 2nd pseudo replicates. Each biological replicate is shuf/split into two pseudos. This is a pooling of each replicate''s 2nd pseudos.'
  

  chip.ctl_paired_end:
    description: 'Sequencing endedness for all controls.'
    group: 'input_genomic_data_control'
    help: 'Setting this on means that all control replicates are paired ended. For mixed controls, use chip.ctl_paired_ends array instead.'
  
  chip.ctl_paired_ends:
    description: 'Sequencing endedness array for mixed SE/PE controls.'
    group: 'input_genomic_data_control'
    help: 'Whether each control replicate is paired ended or not.'
  
  chip.ctl_fastqs_rep1_R1:
    description: 'Read1 FASTQs to be merged for a control replicate 1.'
    group: 'input_genomic_data_control'
    help: 'Define if you want to start pipeline from FASTQs files. Pipeline can start from any type of controls (e.g. FASTQs, BAMs, ...). Choose one type and fill paramters for that type and leave other undefined.  Make sure that they are consistent with read2 FASTQs (chip.ctl_fastqs_rep1_R2).'
    example: [
        'https://storage.googleapis.com/encode-pipeline-test-samples/encode-chip-seq-pipeline/ENCSR936XTK/fastq_subsampled/ctl1-R1.subsampled.80.fastq.gz'
    ]
  
  chip.ctl_fastqs_rep1_R2:
    description: 'Read2 FASTQs to be merged for a control replicate 1.'
    group: 'input_genomic_data_control'
    help: 'Make sure that they are consistent with read1 FASTQs (chip.ctl_fastqs_rep1_R1). These FASTQs are usually technical replicates to be merged.'
    example: [
        'https://storage.googleapis.com/encode-pipeline-test-samples/encode-chip-seq-pipeline/ENCSR936XTK/fastq_subsampled/ctl1-R2.subsampled.80.fastq.gz'
    ]
  
  chip.ctl_fastqs_rep2_R1:
    description: 'Read1 FASTQs to be merged for a control replicate 2.'
    group: 'input_genomic_data_control'
    help: 'Make sure that they are consistent with read2 FASTQs (chip.ctl_fastqs_rep2_R2). These FASTQs are usually technical replicates to be merged.'
    example: [
        'https://storage.googleapis.com/encode-pipeline-test-samples/encode-chip-seq-pipeline/ENCSR936XTK/fastq_subsampled/ctl2-R1.subsampled.80.fastq.gz'
    ]
  
  chip.ctl_fastqs_rep2_R2:
    description: 'Read2 FASTQs to be merged for a control replicate 2.'
    group: 'input_genomic_data_control'
    help: 'Make sure that they are consistent with read1 FASTQs (chip.ctl_fastqs_rep2_R1). These FASTQs are usually technical replicates to be merged.'
    example: [
        'https://storage.googleapis.com/encode-pipeline-test-samples/encode-chip-seq-pipeline/ENCSR936XTK/fastq_subsampled/ctl2-R2.subsampled.80.fastq.gz'
    ]
  
  chip.ctl_fastqs_rep3_R1:
    description: 'Read1 FASTQs to be merged for a control replicate 3.'
    group: 'input_genomic_data_control'
    help: 'Make sure that they are consistent with read2 FASTQs (chip.ctl_fastqs_rep3_R2). These FASTQs are usually technical replicates to be merged.'
  
  chip.ctl_fastqs_rep3_R2:
    description: 'Read2 FASTQs to be merged for a control replicate 3.'
    group: 'input_genomic_data_control'
    help: 'Make sure that they are consistent with read1 FASTQs (chip.ctl_fastqs_rep3_R1). These FASTQs are usually technical replicates to be merged.'
  
  chip.ctl_fastqs_rep4_R1:
    description: 'Read1 FASTQs to be merged for a control replicate 4.'
    group: 'input_genomic_data_control'
    help: 'Make sure that they are consistent with read2 FASTQs (chip.ctl_fastqs_rep4_R2). These FASTQs are usually technical replicates to be merged.'
  
  chip.ctl_fastqs_rep4_R2:
    description: 'Read2 FASTQs to be merged for a control replicate 4.'
    group: 'input_genomic_data_control'
    help: 'Make sure that they are consistent with read1 FASTQs (chip.ctl_fastqs_rep4_R1). These FASTQs are usually technical replicates to be merged.'
  
  chip.ctl_fastqs_rep5_R1:
    description: 'Read1 FASTQs to be merged for a control replicate 5.'
    group: 'input_genomic_data_control'
    help: 'Make sure that they are consistent with read2 FASTQs (chip.ctl_fastqs_rep5_R2). These FASTQs are usually technical replicates to be merged.'
  
  chip.ctl_fastqs_rep5_R2:
    description: 'Read2 FASTQs to be merged for a control replicate 5.'
    group: 'input_genomic_data_control'
    help: 'Make sure that they are consistent with read1 FASTQs (chip.ctl_fastqs_rep5_R1). These FASTQs are usually technical replicates to be merged.'
  
  chip.ctl_fastqs_rep6_R1:
    description: 'Read1 FASTQs to be merged for a control replicate 6.'
    group: 'input_genomic_data_control'
    help: 'Make sure that they are consistent with read2 FASTQs (chip.ctl_fastqs_rep6_R2). These FASTQs are usually technical replicates to be merged.'
  
  chip.tl_fastqs_rep6_R2:
    description: 'Read2 FASTQs to be merged for a control replicate 6.'
    group: 'input_genomic_data_control'
    help: 'Make sure that they are consistent with read1 FASTQs (chip.ctl_fastqs_rep6_R1). These FASTQs are usually technical replicates to be merged.'
  
  chip.ctl_fastqs_rep7_R1:
    description: 'Read1 FASTQs to be merged for a control replicate 7.'
    group: 'input_genomic_data_control'
    help: 'Make sure that they are consistent with read2 FASTQs (chip.ctl_fastqs_rep7_R2). These FASTQs are usually technical replicates to be merged.'
  
  chip.ctl_fastqs_rep7_R2:
    description: 'Read2 FASTQs to be merged for a control replicate 7.'
    group: 'input_genomic_data_control'
    help: 'Make sure that they are consistent with read1 FASTQs (chip.ctl_fastqs_rep7_R1). These FASTQs are usually technical replicates to be merged.'
  
  chip.ctl_fastqs_rep8_R1:
    description: 'Read1 FASTQs to be merged for a control replicate 8.'
    group: 'input_genomic_data_control'
    help: 'Make sure that they are consistent with read2 FASTQs (chip.ctl_fastqs_rep8_R2). These FASTQs are usually technical replicates to be merged.'
  
  chip.ctl_fastqs_rep8_R2:
    description: 'Read2 FASTQs to be merged for a control replicate 8.'
    group: 'input_genomic_data_control'
    help: 'Make sure that they are consistent with read1 FASTQs (chip.ctl_fastqs_rep8_R1). These FASTQs are usually technical replicates to be merged.'
  
  chip.ctl_fastqs_rep9_R1:
    description: 'Read1 FASTQs to be merged for a control replicate 9.'
    group: 'input_genomic_data_control'
    help: 'Make sure that they are consistent with read2 FASTQs (chip.ctl_fastqs_rep9_R2). These FASTQs are usually technical replicates to be merged.'
  
  chip.ctl_fastqs_rep9_R2:
    description: 'Read2 FASTQs to be merged for a control replicate 9.'
    group: 'input_genomic_data_control'
    help: 'Make sure that they are consistent with read1 FASTQs (chip.ctl_fastqs_rep9_R1). These FASTQs are usually technical replicates to be merged.'
  
  chip.ctl_fastqs_rep10_R1:
    description: 'Read1 FASTQs to be merged for a control replicate 10.'
    group: 'input_genomic_data_control'
    help: 'Make sure that they are consistent with read2 FASTQs (chip.ctl_fastqs_rep10_R2). These FASTQs are usually technical replicates to be merged.'
  
  chip.ctl_fastqs_rep10_R2:
    description: 'Read2 FASTQs to be merged for a control replicate 10.'
    group: 'input_genomic_data_control'
    help: 'Make sure that they are consistent with read1 FASTQs (chip.ctl_fastqs_rep10_R1). These FASTQs are usually technical replicates to be merged.'
  
  chip.ctl_bams:
    description: 'List of unfiltered/raw BAM files for each control replicate.'
    group: 'input_genomic_data_control'
    help: 'Define if you want to start pipeline from BAM files. Unfiltered/raw BAM file generated from aligner (e.g. bowtie2). Each entry for each control replicate. e.g. [ctl1.bam, ctl2.bam, ctl3.bam, ...].'
  
  chip.ctl_nodup_bams:
    description: 'List of filtered/deduped BAM files for each control replicate'
    group: 'input_genomic_data_control'
    help: 'Define if you want to start pipeline from filtered BAM files. Filtered/deduped BAM file. Each entry for each control replicate. e.g. [ctl1.nodup.bam, ctl2.nodup.bam, ctl3.nodup.bam, ...].'
  
  chip.ctl_tas:
    description: 'List of TAG-ALIGN files for each biological replicate.'
    group: 'input_genomic_data_control'
    help: 'Define if you want to start pipeline from TAG-ALIGN files. TAG-ALIGN is in a 6-col BED format. It is a simplified version of BAM. Each entry for each control replicate. e.g. [ctl1.tagAlign.gz, ctl2.tagAlign.gz, ...].'
  

  chip.pipeline_type:
    description: 'Pipeline type. tf for TF ChIP-Seq, histone for Histone ChIP-Seq or control for mapping controls only.'
    group: 'pipeline_parameter'
    help: 'Default peak caller is different for each type. spp For TF ChIP-Seq and macs2 for histone ChIP-Seq. Regardless of pipeline type, spp always requires controls but macs2 doesn''t. For control mode, chip.align_only is automatically turned on and cross-correlation analysis is disabled. Do not define ctl_* for control mode. Define fastqs_repX_RY instead.'
    choices: [ 'tf', 'histone', 'control' ]
    example: 'tf'
  
  chip.align_only:
    description: 'Align only mode.'
    group: 'pipeline_parameter'
    help: 'Reads will be aligned but there will be no peak-calling on them. It is turned on automatically if chip.pipeline_type is control.'
  
  chip.true_rep_only:
    description: 'Disables all analyses related to pseudo-replicates.'
    group: 'pipeline_parameter'
    help: 'Pipeline generates 2 pseudo-replicate from one biological replicate. This flag turns off all analyses related to pseudos (with prefix/suffix pr, ppr).'
  
  chip.enable_count_signal_track:
    description: 'Enables generation of count signal tracks.'
    group: 'pipeline_parameter'
  
  chip.enable_jsd:
    description: 'Enables Jensen-Shannon Distance (JSD) plot generation.'
    group: 'pipeline_parameter'
  
  chip.enable_gc_bias:
    description: 'Enables GC bias calculation.'
    group: 'pipeline_parameter'
  

  chip.aligner:
    description: 'Aligner. bowtie2, bwa or custom'
    group: 'alignment'
    help: 'It is bowtie2 by default. To use a custom aligner, define chip.custom_align_py and chip.custom_aligner_idx_tar.'
    choices: [ 'bowtie2', 'bwa', 'custom' ]
    example: 'bowtie2'
  
  chip.custom_align_py:
    description: 'Python script for a custom aligner.'
    group: 'alignment'
    help: 'There is a template included in the documentation for inputs. Defining this parameter will automatically change "chip.aligner" to "custom". You should also define "chip.custom_aligner_idx_tar".'
  
  chip.use_bwa_mem_for_pe:
    description: 'For paired end dataset with read length >= 70bp, use bwa mem instead of bwa aln.'
    group: 'alignment'
    help: 'Use it only for paired end reads >= 70bp.'
  
  chip.crop_length:
    description: 'Crop FASTQs''s reads longer than this length.'
    group: 'alignment'
    help: 'Also drop all reads shorter than chip.crop_length - chip.crop_length_tol.'
  
  chip.crop_length_tol:
    description: 'Tolerance for cropping reads in FASTQs.'
    group: 'alignment'
    help: 'Drop all reads shorter than chip.crop_length - chip.crop_length_tol. Activated only when chip.crop_length is defined.'
  
  chip.xcor_trim_bp:
    description: 'Trim experiment read1 FASTQ (for both SE and PE) for cross-correlation analysis.'
    group: 'alignment'
    help: 'This does not affect alignment of experimental/control replicates. Pipeline additionaly aligns R1 FASTQ only for cross-correlation analysis only. This parameter is used for it.'
  
  chip.use_filt_pe_ta_for_xcor:
    description: 'Use filtered PE BAM for cross-correlation analysis.'
    group: 'alignment'
    help: 'If not defined, pipeline uses SE BAM generated from trimmed read1 FASTQ for cross-correlation analysis.'
  
  chip.dup_marker:
    description: 'Marker for duplicate reads. picard or sambamba.'
    group: 'alignment'
    help: 'picard for Picard MarkDuplicates or sambamba for sambamba markdup.'
    choices: [ 'picard', 'sambamba' ]
    example: 'picard'
  
  chip.no_dup_removal:
    description: 'Disable removal of duplicate reads during filtering BAM.'
    group: 'alignment'
    help: 'Duplicate reads are filtererd out during filtering BAMs to gerenate NODUP_BAM. This flag will keep all duplicate reads in NODUP_BAM. This flag does not affect naming of NODUP_BAM. NODUP_BAM will still have .nodup. suffix in its filename.'
  
  chip.mapq_thresh:
    description: 'Threshold for low MAPQ reads removal.'
    group: 'alignment'
    help: 'Low MAPQ reads are filtered out while filtering BAM.'
  
  chip.filter_chrs:
    description: 'List of chromosomes to be filtered out while filtering BAM.'
    group: 'alignment'
    help: 'It is empty by default, hence no filtering out of specfic chromosomes. It is case-sensitive. Use exact word for chromosome names.'
  
  chip.subsample_reads:
    description: 'Subsample reads. Shuffle and subsample reads.'
    group: 'alignment'
    help: 'This affects all downstream analyses after filtering experiment BAM. (e.g. all TAG-ALIGN files, peak-calling). Reads will be shuffled only if actual number of reads in BAM exceeds this number. 0 means disabled.'
  
  chip.ctl_subsample_reads:
    description: 'Subsample control reads. Shuffle and subsample control reads.'
    group: 'alignment'
    help: 'This affects all downstream analyses after filtering control BAM. (e.g. all TAG-ALIGN files, peak-calling). Reads will be shuffled only if actual number of reads in BAM exceeds this number. 0 means disabled.'
  
  chip.xcor_subsample_reads:
    description: 'Subsample reads for cross-corrlelation analysis only.'
    group: 'alignment'
    help: 'This does not affect downstream analyses after filtering BAM. It is for cross-correlation analysis only.  0 means disabled.'
  
  chip.xcor_exclusion_range_min:
    description: 'Exclusion minimum for cross-correlation analysis.'
    group: 'alignment'
    help: 'For run_spp.R -s. Make sure that it is consistent with default strand shift -s=-500:5:1500 in run_spp.R.'
  
  chip.xcor_exclusion_range_max:
    description: 'Exclusion maximum for cross-coorrelation analysis.'
    group: 'alignment'
    help: 'For run_spp.R -s. If not defined default value of `max(read length + 10, 50)` for TF and `max(read_len + 10, 100)` for histone are used'
  

  chip.ctl_depth_limit:
    description: 'Hard limit for chosen control''s depth.'
    group: 'peak_calling'
    help: 'If control chosen by chip.always_use_pooled_ctl and chip.ctl_depth_ratio is deeper than this hard limit, then such control is subsampled.'
  
  chip.exp_ctl_depth_ratio_limit:
    description: 'Second limit for chosen control''s depth.'
    group: 'peak_calling'
    help: 'If control chosen by chip.always_use_pooled_ctl and chip.ctl_depth_ratio is deeper than experiment replicate''s read depth multiplied by this factor then such control is subsampled down to maximum of multiplied value and hard limit chip.ctl_depth_limit.'
  
  chip.fraglen:
    description: 'Fragment length for each biological replicate.'
    group: 'peak_calling'
    help: 'Fragment length is estimated by cross-correlation analysis, which is valid only when pipeline started from FASTQs. If defined, fragment length estimated by cross-correlation analysis is ignored.'
  
  chip.peak_caller:
    description: 'Peak caller.'
    group: 'peak_calling'
    help: 'It is spp and macs2 by default for TF ChIP-seq and histone ChIP-seq, respectively. e.g. you can use macs2 for TF ChIP-Seq even though spp is by default for TF ChIP-Seq (chip.pipeline_type == tf).'
    choices: [ 'spp', 'macs2' ]
    example: 'spp'
  
  chip.always_use_pooled_ctl:
    description: 'Always choose a pooled control for each experiment replicate.'
    group: 'peak_calling'
    help: 'If turned on, ignores chip.ctl_depth_ratio.'
  
  chip.ctl_depth_ratio:
    description: 'Maximum depth ratio between control replicates.'
    group: 'peak_calling'
    help: 'If ratio of depth between any two controls is higher than this, then always use a pooled control for all experiment replicates.'
  

  chip.cap_num_peak:
    description: 'Upper limit on the number of peaks.'
    group: 'peak_calling'
    help: 'It is 30000000 and 50000000 by default for spp and macs2, respectively.'
  
  chip.pval_thresh:
    description: 'p-value Threshold for MACS2 peak caller.'
    group: 'peak_calling'
    help: 'macs2 callpeak -p'
  
  chip.fdr_thresh:
    description: 'FDR threshold for spp peak caller (phantompeakqualtools).'
    group: 'peak_calling'
    help: 'run_spp.R -fdr='
  
  chip.idr_thresh:
    description: 'IDR threshold.'
    group: 'peak_calling'
  

  chip.align_cpu:
    description: 'Number of cores for task align.'
    group: 'resource_parameter'
    help: 'Task align merges/crops/maps FASTQs.'
  
  chip.align_bowtie2_mem_factor:
    description: 'Multiplication factor to determine memory required for task align with bowtie2 (default) as aligner.'
    group: 'resource_parameter'
    help: 'This factor will be multiplied to the size of FASTQs to determine required memory of instance (GCP/AWS) or job (HPCs).'
  
  chip.align_bwa_mem_factor:
    description: 'Multiplication factor to determine memory required for task align with bwa as aligner.'
    group: 'resource_parameter'
    help: 'This factor will be multiplied to the size of FASTQs to determine required memory of instance (GCP/AWS) or job (HPCs).'
  
  chip.align_time_hr:
    description: 'Walltime (h) required for task align.'
    group: 'resource_parameter'
    help: 'This is for HPCs only. e.g. SLURM, SGE, ...'
  
  chip.align_bowtie2_disk_factor:
    description: 'Multiplication factor to determine persistent disk size for task align with bowtie2 (default) as aligner.'
    group: 'resource_parameter'
    help: 'This factor will be multiplied to the size of FASTQs to determine required disk size of instance on GCP/AWS.'
  
  chip.align_bwa_disk_factor:
    description: 'Multiplication factor to determine persistent disk size for task align with bwa as aligner.'
    group: 'resource_parameter'
    help: 'This factor will be multiplied to the size of FASTQs to determine required disk size of instance on GCP/AWS.'
  
  chip.filter_cpu:
    description: 'Number of cores for task filter.'
    group: 'resource_parameter'
    help: 'Task filter filters raw/unfilterd BAM to get filtered/deduped BAM.'
  
  chip.filter_mem_factor:
    description: 'Multiplication factor to determine memory required for task filter.'
    group: 'resource_parameter'
    help: 'This factor will be multiplied to the size of BAMs to determine required memory of instance (GCP/AWS) or job (HPCs).'
  
  chip.filter_time_hr:
    description: 'Walltime (h) required for task filter.'
    group: 'resource_parameter'
    help: 'This is for HPCs only. e.g. SLURM, SGE, ...'
  
  chip.filter_disk_factor:
    description: 'Multiplication factor to determine persistent disk size for task filter.'
    group: 'resource_parameter'
    help: 'This factor will be multiplied to the size of BAMs to determine required disk size of instance on GCP/AWS.'
  
  chip.bam2ta_cpu:
    description: 'Number of cores for task bam2ta.'
    group: 'resource_parameter'
    help: 'Task bam2ta converts filtered/deduped BAM in to TAG-ALIGN (6-col BED) format.'
  
  chip.bam2ta_mem_factor:
    description: 'Multiplication factor to determine memory required for task bam2ta.'
    group: 'resource_parameter'
    help: 'This factor will be multiplied to the size of filtered BAMs to determine required memory of instance (GCP/AWS) or job (HPCs).'
  
  chip.bam2ta_time_hr:
    description: 'Walltime (h) required for task bam2ta.'
    group: 'resource_parameter'
    help: 'This is for HPCs only. e.g. SLURM, SGE, ...'
  
  chip.bam2ta_disk_factor:
    description: 'Multiplication factor to determine persistent disk size for task bam2ta.'
    group: 'resource_parameter'
    help: 'This factor will be multiplied to the size of filtered BAMs to determine required disk size of instance on GCP/AWS.'
  
  chip.spr_mem_factor:
    description: 'Multiplication factor to determine memory required for task spr.'
    group: 'resource_parameter'
    help: 'This factor will be multiplied to the size of filtered BAMs to determine required memory of instance (GCP/AWS) or job (HPCs).'
  
  chip.spr_disk_factor:
    description: 'Multiplication factor to determine persistent disk size for task spr.'
    group: 'resource_parameter'
    help: 'This factor will be multiplied to the size of filtered BAMs to determine required disk size of instance on GCP/AWS.'
  
  chip.jsd_cpu:
    description: 'Number of cores for task jsd.'
    group: 'resource_parameter'
    help: 'Task jsd plots Jensen-Shannon distance and metrics related to it.'
  
  chip.jsd_mem_factor:
    description: 'Multiplication factor to determine memory required for task jsd.'
    group: 'resource_parameter'
    help: 'This factor will be multiplied to the size of filtered BAMs to determine required memory of instance (GCP/AWS) or job (HPCs).'
  
  chip.jsd_time_hr:
    description: 'Walltime (h) required for task jsd.'
    group: 'resource_parameter'
    help: 'This is for HPCs only. e.g. SLURM, SGE, ...'
  
  chip.jsd_disk_factor:
    description: 'Multiplication factor to determine persistent disk size for task jsd.'
    group: 'resource_parameter'
    help: 'This factor will be multiplied to the size of filtered BAMs to determine required disk size of instance on GCP/AWS.'
  
  chip.xcor_cpu:
    description: 'Number of cores for task xcor.'
    group: 'resource_parameter'
    help: 'Task xcor does cross-correlation analysis (including a plot) on subsampled TAG-ALIGNs.'
  
  chip.xcor_mem_factor:
    description: 'Multiplication factor to determine memory required for task xcor.'
    group: 'resource_parameter'
    help: 'This factor will be multiplied to the size of TAG-ALIGNs (BEDs) to determine required memory of instance (GCP/AWS) or job (HPCs).'
  
  chip.xcor_time_hr:
    description: 'Walltime (h) required for task xcor.'
    group: 'resource_parameter'
    help: 'This is for HPCs only. e.g. SLURM, SGE, ...'
  
  chip.xcor_disk_factor:
    description: 'Multiplication factor to determine persistent disk size for task xcor.'
    group: 'resource_parameter'
    help: 'This factor will be multiplied to the size of TAG-ALIGNs (BEDs) to determine required disk size of instance on GCP/AWS.'
  
  chip.subsample_ctl_mem_factor:
    description: 'Multiplication factor to determine memory required for task subsample_ctl.'
    group: 'resource_parameter'
    help: 'This factor will be multiplied to the size of TAG-ALIGNs (BEDs) to determine required memory of instance (GCP/AWS) or job (HPCs).'
  
  chip.subsample_ctl_disk_factor:
    description: 'Multiplication factor to determine persistent disk size for task subsample_ctl.'
    group: 'resource_parameter'
    help: 'This factor will be multiplied to the size of TAG-ALIGNs (BEDs) to determine required disk size of instance on GCP/AWS.'
  
  chip.call_peak_cpu:
    description: 'Number of cores for task call_peak. IF MACS2 is chosen as peak_caller (or chip.pipeline_type is histone), then cpu will be fixed at 2.'
    group: 'resource_parameter'
    help: 'Task call_peak call peaks on TAG-ALIGNs by using SPP/MACS2 peak caller. MACS2 is single-threaded so cpu will be fixed at 2 for MACS2.'
  
  chip.call_peak_spp_mem_factor:
    description: 'Multiplication factor to determine memory required for task call_peak with spp as peak_caller.'
    group: 'resource_parameter'
    help: 'This factor will be multiplied to the size of TAG-ALIGNs (BEDs) to determine required memory of instance (GCP/AWS) or job (HPCs).'
  
  chip.call_peak_macs2_mem_factor:
    description: 'Multiplication factor to determine memory required for task call_peak with macs2 as peak_caller.'
    group: 'resource_parameter'
    help: 'This factor will be multiplied to the size of TAG-ALIGNs (BEDs) to determine required memory of instance (GCP/AWS) or job (HPCs).'
  
  chip.call_peak_time_hr:
    description: 'Walltime (h) required for task call_peak.'
    group: 'resource_parameter'
    help: 'This is for HPCs only. e.g. SLURM, SGE, ...'
  
  chip.call_peak_spp_disk_factor:
    description: 'Multiplication factor to determine persistent disk size for task call_peak with spp as peak_caller.'
    group: 'resource_parameter'
    help: 'This factor will be multiplied to the size of TAG-ALIGNs (BEDs) to determine required disk size of instance on GCP/AWS.'
  
  chip.call_peak_macs2_disk_factor:
    description: 'Multiplication factor to determine persistent disk size for task call_peak with macs2 as peak_caller.'
    group: 'resource_parameter'
    help: 'This factor will be multiplied to the size of TAG-ALIGNs (BEDs) to determine required disk size of instance on GCP/AWS.'
  
  chip.macs2_signal_track_mem_factor:
    description: 'Multiplication factor to determine memory required for task macs2_signal_track.'
    group: 'resource_parameter'
    help: 'This factor will be multiplied to the size of TAG-ALIGNs (BEDs) to determine required memory of instance (GCP/AWS) or job (HPCs).'
  
  chip.macs2_signal_track_time_hr:
    description: 'Walltime (h) required for task macs2_signal_track.'
    group: 'resource_parameter'
    help: 'This is for HPCs only. e.g. SLURM, SGE, ...'
  
  chip.macs2_signal_track_disk_factor:
    description: 'Multiplication factor to determine persistent disk size for task macs2_signal_track.'
    group: 'resource_parameter'
    help: 'This factor will be multiplied to the size of TAG-ALIGNs (BEDs) to determine required disk size of instance on GCP/AWS.'
  
  chip.align_trimmomatic_java_heap:
    description: 'Maximum Java heap (java -Xmx) in task align.'
    group: 'resource_parameter'
    help: 'Maximum memory for Trimmomatic. If not defined, 90% of align task''s memory will be used.'
  
  chip.filter_picard_java_heap:
    description: 'Maximum Java heap (java -Xmx) in task filter.'
    group: 'resource_parameter'
    help: 'Maximum memory for Picard tools MarkDuplicates. If not defined, 90% of filter task''s memory will be used.'
  
  chip.gc_bias_picard_java_heap:
    description: 'Maximum Java heap (java -Xmx) in task gc_bias.'
    group: resource_parameter
    help: 'Maximum memory for Picard tools CollectGcBiasMetrics. If not defined, 90% of gc_bias task''s memory will be used.'
  

parameter_group:
  pipeline_metadata:
    title: 'Pipeline metadata'
    description: 'Metadata for a pipeline (e.g. title and description).'

  reference_genome:
    title: 'Reference genome'
    description: 'Genome specific files. e.g. reference FASTA, bowtie2 index, chromosome sizes file.'
    help: 'Choose one chip.genome_tsv file that defines all genome specific parameters in it or define each genome specific parameter in input JSON to override those defined in genome TSV file. If you use Caper then use https://storage.googleapis.com/encode-pipeline-genome-data/genome_tsv/v1/[GENOME]_caper.tsv. Caper will automatically download/install all files defined in such TSV. Otherwise download genome TSV file by using a shell script (scripts/download_genome_data.sh [GENOME] [DEST_DIR]). Supported genomes are hg38, hg19, mm10 and mm9. See pipeline documentation if you want to build genome database from your own FASTA file. If some genome data are missing then analyses using such data will be skipped.'

  input_genomic_data:
    title: 'Input genomic data'
    description: 'Genomic input files for experiment.'
    help: 'Pipeline can start with any types of experiment data (e.g. FASTQ, BAM, NODUP_BAM, TAG-ALIGN, PEAK). Choose one type and leave others empty. FASTQs have a variable for each biological replicate. e.g. chip.fastqs_rep1_R1 and chip.fastqs_rep2_R1. You can define up to 10 experiment replicates. For other types, there is an array to define file for each biological replicate. e.g. chip.bams: ["rep1.bam", "rep1.bam"]. Define sequential endedness with chip.paired_end, if you have mixed SE and PE replicates then define chip.paired_ends instead for each replicate. e.g. chip.paired_ends: [false, true].'

  input_genomic_data_control:
    title: 'Input genomic data (control)'
    description: 'Genomic input files for control. TF ChIP-seq requires control for peak calling but histone ChIP-seq does not.'
    help: 'Pipeline can start with any types of control data (e.g. FASTQ, BAM, NODUP_BAM, TAG-ALIGN). Choose one type and leave others empty. FASTQs have a variable for each control replicate. e.g. chip.ctl_fastqs_rep1_R1 and chip.ctl_fastqs_rep2_R1. You can define up to 10 control replicates. For other types, there is an array to define file for each control replicate. e.g. chip.ctl_bams: ["ctl1.bam", "ctl1.bam"]. Define sequential endedness with chip.ctl_paired_end, if you have mixed SE and PE control replicates then define chip.ctl_paired_ends instead for each replicate. e.g. chip.ctl_paired_ends: [false, true]. If none of these are defined, pipeline will use chip.paired_end for controls.'

  pipeline_parameter:
    title: 'Pipeline parameter'
    description: 'Pipeline type and flags to turn on/off analyses.'
    help: 'Use chip.align_only to align FASTQs without peak calling.'

  alignment:
    title: 'Alignment'
    description: 'Parameters for alignment.'
    help: 'Pipeline can crop FASTQs (chip.crop_length > 0) with tolerance (chip.crop_length_tol) before mapping.'

  peak_calling:
    title: 'Peak calling'
    description: 'Parameters for peak calling.'
    help: 'This group includes statistical thresholds for peak-calling or post-peak-calling analyses: p-val, FDR, IDR. It also include parameters for control choosing/subsampling. All control replicates are pooled and pooled control is used for peak calling against each experiment replicate by default (see chip.always_use_pooled_ctl). Pipeline compares read depth of experiment replicate and a chosen control. It also compare read depth of controls. If control is too deep then it is subsampled.'

  resource_parameter:
    title: 'Resource parameter'
    description: 'Number of CPUs (threads), max. memory and walltime for tasks.'
    help: 'Resource settings are used for determining an instance type on cloud backends (e.g. GCP, AWS) and used for submitting tasks to a cluster engine (e.g. SLURM, SGE, ...). Walltime (chip.*_time_hr) is only used for cluster engines. Other tasks default to use 1 CPU and 4GB of memory.'

  